(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{697:function(n,e,t){"use strict";t.r(e);var a=t(4),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"记录流程图踩坑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记录流程图踩坑"}},[n._v("#")]),n._v(" 记录流程图踩坑")]),n._v(" "),t("hr"),n._v(" "),t("h3",{attrs:{id:"_1-准备工作-vue2项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作-vue2项目"}},[n._v("#")]),n._v(" 1. 准备工作：（vue2项目）")]),n._v(" "),t("p",[n._v("安装一下依赖")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//整合bpmn.js，所以肯定要添加这个依赖\nnpm install --save bpmn-js;\n//显示右侧属性栏，要添加这个依赖\nnpm install -- save bpmn-js-properties-panel;\n//添加这个依赖才能够在右侧属性栏修改节点属性，不然会报错\nnpm install --save camunda-bpmn-moddle;\n")])])]),t("h3",{attrs:{id:"_2-在main-js里引入样式文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-在main-js里引入样式文件"}},[n._v("#")]),n._v(" 2. 在main.js里引入样式文件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 以下为bpmn工作流绘图工具的样式\n// 左边工具栏以及编辑节点的样式\nimport 'bpmn-js/dist/assets/diagram-js.css' \nimport 'bpmn-js/dist/assets/bpmn-font/css/bpmn.css'\nimport 'bpmn-js/dist/assets/bpmn-font/css/bpmn-codes.css'\nimport 'bpmn-js/dist/assets/bpmn-font/css/bpmn-embedded.css'\n// 右边工具栏样式\nimport 'bpmn-js-properties-panel/dist/assets/bpmn-js-properties-panel.css' \n")])])]),t("h3",{attrs:{id:"_3-主文件页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-主文件页"}},[n._v("#")]),n._v(" 3. 主文件页")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<template>\n  <div class=\"containers\">\n    <div class=\"canvas\" ref=\"canvas\"></div>\n    <div id=\"js-properties-panel\" class=\"panel\"></div>\n    <div class=\"buttons\">\n      <button @click=\"saveDiagram()\">下载XML</button>\n    </div>\n  </div>\n</template>\n<script>\n  // 引入Bpmn相关的依赖\n  import BpmnModeler from 'bpmn-js/lib/Modeler'\n  // 这里引入的是右侧属性栏这个框\n  import propertiesPanelModule from 'bpmn-js-properties-panel'\n  // 而这个引入的是右侧属性栏里的内容\n  import propertiesProviderModule from 'bpmn-js-properties-panel/lib/provider/camunda'\n  // 右侧属性栏扩展，不然报错\n  import camundaModdleDescriptor from 'camunda-bpmn-moddle/resources/camunda'\n  // 汉化组件\n  import customTranslate from './customTranslate/customTranslate';\n  var customTranslateModule = {\n    translate: ['value', customTranslate]\n  };\n  import {\n    defaultXmlStr\n  } from './defaultXmlStr'\n  export default {\n    mounted() {\n      this.init()\n    },\n    data() {\n      return {\n        // bpmn建模器\n        bpmnModeler: null,\n        container: null,\n        canvas: null,\n        xmlStr: ''\n      }\n    },\n    // 方法集合\n    methods: {\n      async init() {\n        this.xmlStr = await this.getXmlUrl();\n        this.$nextTick(() => {\n          this.initBpmn()\n        })\n      },\n      getXmlUrl() {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            // const url = 'https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/mock1.bpmn'\n            const url = ''\n            resolve(url)\n          }, 1000)\n        })\n      },\n      initBpmn() {\n        // 获取到属性ref为“canvas”的dom节点\n        const canvas = this.$refs.canvas\n        // 建模\n        this.bpmnModeler = new BpmnModeler({\n          container: canvas,\n          //添加左侧控制板\n          propertiesPanel: {\n            parent: '#js-properties-panel'\n          },\n          additionalModules: [\n            //添加右侧属性面板\n            propertiesProviderModule,\n            propertiesPanelModule,\n            //汉化\n            customTranslateModule\n          ],\n          moddleExtensions: {\n            //如果要在属性面板中修改属性，必须添加\n            camunda: camundaModdleDescriptor\n          }\n        })\n        this.createDiagram()\n      },\n      async createDiagram() {\n        if (this.xmlStr === '') {\n          this.xmlStr = defaultXmlStr\n        }\n        try {\n          const result = await this.bpmnModeler.importXML(this.xmlStr);\n          const {\n            warnings\n          } = result;\n          console.log(warnings);\n        } catch (err) {\n          console.log(err.message, err.warnings);\n        }\n        // 让图能自适应屏幕\n        var canvas = this.bpmnModeler.get('canvas');\n        canvas.zoom('fit-viewport');\n\n      },\n      // 下载为bpmn格式,done是个函数，调用的时候传入的\n      async saveDiagram() {\n        try {\n          const result = await this.bpmnModeler.saveXML({\n            format: true\n          });\n          const {\n            xml\n          } = result;\n          console.log(\"xml\", xml);\n        } catch (err) {\n          console.log(\"err\", err);\n        }\n      }\n    },\n  }\n<\/script>\n<style scoped>\n  .containers {\n    background-color: #ffffff;\n    width: 100%;\n    height: calc(100vh - 220px);\n  }\n\n  .canvas {\n    width: 100%;\n    height: 100%;\n  }\n\n  .panel {\n    position: absolute;\n    right: 20px;\n    top: 110px;\n    width: 300px;\n    height: calc(100vh - 300px);\n    overflow-y: scroll;\n  }\n\n  .buttons {\n    position: absolute;\n    right: 320px;\n    top: 120px;\n  }\n</style>\n\n")])])]),t("h3",{attrs:{id:"_4-主文件页需要的文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-主文件页需要的文件"}},[n._v("#")]),n._v(" 4. 主文件页需要的文件")]),n._v(" "),t("h4",{attrs:{id:"defaultxmlstr-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defaultxmlstr-js"}},[n._v("#")]),n._v(" defaultXmlStr.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('export var defaultXmlStr = `xml <?xml version="1.0" encoding="UTF-8"?>\n<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" id="sid-38422fae-e03e-43a3-bef4-bd33b32041b2" targetNamespace="http://bpmn.io/bpmn" exporter="bpmn-js (https://demo.bpmn.io)" exporterVersion="5.1.2">\n  <process id="Process" name="默认模板" isExecutable="true" camunda:versionTag="0.0.1">\n    <startEvent id="StartEvent" name="开始" />\n  </process>\n  <bpmndi:BPMNDiagram id="BpmnDiagram_1">\n    <bpmndi:BPMNPlane id="BpmnPlane_1" bpmnElement="Process">\n      <bpmndi:BPMNShape id="StartEvent_1y45yut_di" bpmnElement="StartEvent">\n        <omgdc:Bounds x="152" y="102" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <omgdc:Bounds x="160" y="145" width="22" height="14" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>`\n\n')])])]),t("h4",{attrs:{id:"customtranslate-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#customtranslate-js"}},[n._v("#")]),n._v(" customTranslate.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import translations from './translations';\nexport default function customTranslate(template, replacements) {\n  replacements = replacements || {};\n  // Translate\n  template = translations[template] || template;\n  // Replace\n  return template.replace(/{([^}]+)}/g, function(_, key) {\n    return replacements[key] || '{' + key + '}';\n  });\n}\n")])])]),t("h4",{attrs:{id:"translations-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#translations-js"}},[n._v("#")]),n._v(" translations.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/**\n * This is a sample file that should be replaced with the actual translation.\n *\n * Checkout https://github.com/bpmn-io/bpmn-js-i18n for a list of available\n * translations and labels to translate.\n */\nexport default {\n  'Activate the global connect tool': '激活全局连接工具',\n  'Append {type}': '添加 {type}',\n  'Add Lane above': '在上面添加道',\n  'Divide into two Lanes': '分割成两个道',\n  'Divide into three Lanes': '分割成三个道',\n  'Add Lane below': '在下面添加道',\n  'Append compensation activity': '追加补偿活动',\n  'Change type': '修改类型',\n  'Connect using Association': '使用关联连接',\n  'Connect using Sequence/MessageFlow or Association': '使用顺序/消息流或者关联连接',\n  'Connect using DataInputAssociation': '使用数据输入关联连接',\n  'Remove': '移除',\n  'Activate the hand tool': '激活抓手工具',\n  'Activate the lasso tool': '激活套索工具',\n  'Activate the create/remove space tool': '激活创建/删除空间工具',\n  'Create expanded SubProcess': '创建扩展子过程',\n  'Create IntermediateThrowEvent/BoundaryEvent': '创建中间抛出事件/边界事件',\n  'Create Pool/Participant': '创建池/参与者',\n  'Parallel Multi Instance': '并行多重事件',\n  'Sequential Multi Instance': '时序多重事件',\n  'DataObjectReference': '数据对象参考',\n  'DataStoreReference': '数据存储参考',\n  'Loop': '循环',\n  'Ad-hoc': '即席',\n  'Create {type}': '创建 {type}',\n  'Task': '任务',\n  'Send Task': '发送任务',\n  'Receive Task': '接收任务',\n  'User Task': '用户任务',\n  'Manual Task': '手工任务',\n  'Business Rule Task': '业务规则任务',\n  'Service Task': '服务任务',\n  'Script Task': '脚本任务',\n  'Call Activity': '调用活动',\n  'Sub Process (collapsed)': '子流程（折叠的）',\n  'Sub Process (expanded)': '子流程（展开的）',\n  'Start Event': '开始事件',\n  'StartEvent': '开始事件',\n  'Intermediate Throw Event': '中间事件',\n  'End Event': '结束事件',\n  'EndEvent': '结束事件',\n  'Create Gateway': '创建网关',\n  'Create Intermediate/Boundary Event': '创建中间/边界事件',\n  'Message Start Event': '消息开始事件',\n  'Timer Start Event': '定时开始事件',\n  'Conditional Start Event': '条件开始事件',\n  'Signal Start Event': '信号开始事件',\n  'Error Start Event': '错误开始事件',\n  'Escalation Start Event': '升级开始事件',\n  'Compensation Start Event': '补偿开始事件',\n  'Message Start Event (non-interrupting)': '消息开始事件（非中断）',\n  'Timer Start Event (non-interrupting)': '定时开始事件（非中断）',\n  'Conditional Start Event (non-interrupting)': '条件开始事件（非中断）',\n  'Signal Start Event (non-interrupting)': '信号开始事件（非中断）',\n  'Escalation Start Event (non-interrupting)': '升级开始事件（非中断）',\n  'Message Intermediate Catch Event': '消息中间捕获事件',\n  'Message Intermediate Throw Event': '消息中间抛出事件',\n  'Timer Intermediate Catch Event': '定时中间捕获事件',\n  'Escalation Intermediate Throw Event': '升级中间抛出事件',\n  'Conditional Intermediate Catch Event': '条件中间捕获事件',\n  'Link Intermediate Catch Event': '链接中间捕获事件',\n  'Link Intermediate Throw Event': '链接中间抛出事件',\n  'Compensation Intermediate Throw Event': '补偿中间抛出事件',\n  'Signal Intermediate Catch Event': '信号中间捕获事件',\n  'Signal Intermediate Throw Event': '信号中间抛出事件',\n  'Message End Event': '消息结束事件',\n  'Escalation End Event': '定时结束事件',\n  'Error End Event': '错误结束事件',\n  'Cancel End Event': '取消结束事件',\n  'Compensation End Event': '补偿结束事件',\n  'Signal End Event': '信号结束事件',\n  'Terminate End Event': '终止结束事件',\n  'Message Boundary Event': '消息边界事件',\n  'Message Boundary Event (non-interrupting)': '消息边界事件（非中断）',\n  'Timer Boundary Event': '定时边界事件',\n  'Timer Boundary Event (non-interrupting)': '定时边界事件（非中断）',\n  'Escalation Boundary Event': '升级边界事件',\n  'Escalation Boundary Event (non-interrupting)': '升级边界事件（非中断）',\n  'Conditional Boundary Event': '条件边界事件',\n  'Conditional Boundary Event (non-interrupting)': '条件边界事件（非中断）',\n  'Error Boundary Event': '错误边界事件',\n  'Cancel Boundary Event': '取消边界事件',\n  'Signal Boundary Event': '信号边界事件',\n  'Signal Boundary Event (non-interrupting)': '信号边界事件（非中断）',\n  'Compensation Boundary Event': '补偿边界事件',\n  'Exclusive Gateway': '互斥网关',\n  'Parallel Gateway': '并行网关',\n  'Inclusive Gateway': '相容网关',\n  'Complex Gateway': '复杂网关',\n  'Event based Gateway': '事件网关',\n  'Transaction': '转运',\n  'Sub Process': '子流程',\n  'Event Sub Process': '事件子流程',\n  'Collapsed Pool': '折叠池',\n  'Expanded Pool': '展开池',\n  // Errors\n  'no parent for {element} in {parent}': '在{parent}里，{element}没有父类',\n  'no shape type specified': '没有指定的形状类型',\n  'flow elements must be children of pools/participants': '流元素必须是池/参与者的子类',\n  'out of bounds release': \"越界释放\",\n  'more than {count} child lanes': '子道大于{count} ',\n  'element required': '元素不能为空',\n  'diagram not part of bpmn:Definitions': '流程图不符合bpmn规范',\n  'no diagram to display': '没有可展示的流程图',\n  'no process or collaboration to display': '没有可展示的流程/协作',\n  'element {element} referenced by {referenced}#{property} not yet drawn': '由{referenced}#{property}引用的{element}元素仍未绘制',\n  'already rendered {element}': '{element} 已被渲染',\n  'failed to import {element}': '导入{element}失败',\n  //属性面板的参数\n  'Id': '编号',\n  'Name': '名称',\n  'General': '常规',\n  'Details': '详情',\n  'Message Name': '消息名称',\n  'Message': '消息',\n  'Initiator': '创建者',\n  'Asynchronous Continuations': '持续异步',\n  'Asynchronous Before': '异步前',\n  'Asynchronous After': '异步后',\n  'Job Configuration': '工作配置',\n  'Exclusive': '排除',\n  'Job Priority': '工作优先级',\n  'Retry Time Cycle': '重试时间周期',\n  'Documentation': '文档',\n  'Element Documentation': '元素文档',\n  'History Configuration': '历史配置',\n  'History Time To Live': '历史的生存时间',\n  'Forms': '表单',\n  'Form Key': '表单key',\n  'Form Fields': '表单字段',\n  'Business Key': '业务key',\n  'Form Field': '表单字段',\n  'ID': '编号',\n  'Type': '类型',\n  'Label': '名称',\n  'Default Value': '默认值',\n  'Validation': '校验',\n  'Add Constraint': '添加约束',\n  'Config': '配置',\n  'Properties': '属性',\n  'Add Property': '添加属性',\n  'Value': '值',\n  'Listeners': '监听器',\n  'Execution Listener': '执行监听',\n  'Event Type': '事件类型',\n  'Listener Type': '监听器类型',\n  'Java Class': 'Java类',\n  'Expression': '表达式',\n  'Must provide a value': '必须提供一个值',\n  'Delegate Expression': '代理表达式',\n  'Script': '脚本',\n  'Script Format': '脚本格式',\n  'Script Type': '脚本类型',\n  'Inline Script': '内联脚本',\n  'External Script': '外部脚本',\n  'Resource': '资源',\n  'Field Injection': '字段注入',\n  'Extensions': '扩展',\n  'Input/Output': '输入/输出',\n  'Input Parameters': '输入参数',\n  'Output Parameters': '输出参数',\n  'Parameters': '参数',\n  'Output Parameter': '输出参数',\n  'Timer Definition Type': '定时器定义类型',\n  'Timer Definition': '定时器定义',\n  'Date': '日期',\n  'Duration': '持续',\n  'Cycle': '循环',\n  'Signal': '信号',\n  'Signal Name': '信号名称',\n  'Escalation': '升级',\n  'Error': '错误',\n  'Link Name': '链接名称',\n  'Condition': '条件名称',\n  'Variable Name': '变量名称',\n  'Variable Event': '变量事件',\n  'Specify more than one variable change event as a comma separated list.': '多个变量事件以逗号隔开',\n  'Wait for Completion': '等待完成',\n  'Activity Ref': '活动参考',\n  'Version Tag': '版本标签',\n  'Executable': '可执行文件',\n  'External Task Configuration': '扩展任务配置',\n  'Task Priority': '任务优先级',\n  'External': '外部',\n  'Connector': '连接器',\n  'Must configure Connector': '必须配置连接器',\n  'Connector Id': '连接器编号',\n  'Implementation': '实现方式',\n  'Field Injections': '字段注入',\n  'Fields': '字段',\n  'Result Variable': '结果变量',\n  'Topic': '主题',\n  'Configure Connector': '配置连接器',\n  'Input Parameter': '输入参数',\n  'Assignee': '代理人',\n  'Candidate Users': '候选用户',\n  'Candidate Groups': '候选组',\n  'Due Date': '到期时间',\n  'Follow Up Date': '跟踪日期',\n  'Priority': '优先级',\n  'The follow up date as an EL expression (e.g. ${someDate} or an ISO date (e.g. 2015-06-26T09:54:00)': '跟踪日期必须符合EL表达式，如： ${someDate} ,或者一个ISO标准日期，如：2015-06-26T09:54:00',\n  'The due date as an EL expression (e.g. ${someDate} or an ISO date (e.g. 2015-06-26T09:54:00)': '跟踪日期必须符合EL表达式，如： ${someDate} ,或者一个ISO标准日期，如：2015-06-26T09:54:00',\n  'Variables': '变量',\n};\n\n")])])]),t("h3",{attrs:{id:"_5-最终效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-最终效果"}},[n._v("#")]),n._v(" 5.  最终效果")]),n._v(" "),t("img",{attrs:{src:"/images/bpmn.jpg"}}),n._v(" "),t("blockquote",[t("p",[n._v("如与效果图不符，调整样式即可")])])])}),[],!1,null,null,null);e.default=s.exports}}]);